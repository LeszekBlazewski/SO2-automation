#!/bin/bash

set -eu

# Creates students group and template repository to be used as parent project for other repositories in which students group should be enforced
# Students have access only to theirs set of branches under refs/heads/${username}/*. Also anonymous reads are prohibited in order to not pass the  permissions and see other users results.
# Following arguments must be supplied to script:
# gerrit_authorized_url
# gerrit_username
# gerrit_user_email
# gerrit_template_repo_name

source .env

if [[ ! $# -eq 4 ]]; then
    echo "Please supply gerrit authorized url, gerrit_username, gerrit_user_email and gerrit_template_repo_name" && exit 1
fi


script_dir=$(dirname $(realpath "$0"))
gerrit_authorized_url="$1"
gerrit_username="$2"
gerrit_user_email="$3"
gerrit_template_repo_name="$4"
project_location="/tmp/${gerrit_template_repo_name}"

# Create new Students group
students_group_uuid=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 40)
group_name='Students'
curl --header "Content-Type: application/json" \
    --request PUT \
     --silent \
    --show-error \
    --output /dev/null \
    --data '{"description":"Students group which allows access only to user branches", "uuid":"'"${students_group_uuid}"'"}' \
    "${gerrit_authorized_url}/groups/${group_name}"

# Delete Administrator from this group since he is automatically added there
curl --request DELETE \
    --silent \
    --show-error \
    --output /dev/null \
    "${gerrit_authorized_url}/groups/${group_name}/members/Administrator"

# Create students template repository (base for other projects)
curl --header "Content-Type: application/json" \
    --request PUT \
    --silent \
    --show-error \
    --output /dev/null \
    --data '{"description":"Template repository configured with Students access group", "permissions_only": true, "parent": "", "create_empty_commit":false, "owners": ["Administrators"]}' \
    "${gerrit_authorized_url}/projects/${gerrit_template_repo_name}"

# Clone new repo to host system with commit-msg hook
rm -rf "$project_location"
git clone "${gerrit_authorized_url}/${gerrit_template_repo_name}" "$project_location" && cd "$project_location"
mkdir -p .git/hooks
commit_msg_hook=$(git rev-parse --git-dir)/hooks/commit-msg 
curl -sSLo "${commit_msg_hook}" "${gerrit_authorized_url}"/tools/hooks/commit-msg 
chmod +x "${commit_msg_hook}"

# Save gerrit user credentials in local git config
git config --local user.name "${gerrit_username}" 
git config --local user.email "${gerrit_user_email}"

# Add preconfigured students permissions to repository
# We have to include all groups to which permissions we set in groups file, these are:
# global group: Registered users
# internal groups:  Administrators, Students -> We have to paste in admin group uuid generated by gerrit
/bin/cp -a "${script_dir}/students-template-projects-config/." .
# Add  generated uuid for students group
sed -i "s/students_group_uuid/${students_group_uuid}/" groups
# Fetch Administrators uuid group
group_response=$(curl --header "Content-Type: application/json" \
    --request GET \
    --silent \
    --show-error \
    "${gerrit_authorized_url}/groups/Administrators"
    )
# Extract id from response and insert it into group file



git commit -a -m "Configure access rights for Student groups"
git push origin HEAD:refs/meta/config

printf "Sucess, group %s and base repo %s has been created" "$group_name" "$gerrit_template_repo_name"

rm -rf "$project_location"